/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rgbcolor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgbcolor */ \"./src/rgbcolor.ts\");\n\nwindow.addEventListener('load', function () {\n    var cur_canvas, cur_context, canvas_list = [], canvas_history = [[]], history_id = 0, canvas_written = false;\n    var line_thickness = 5, line_color = \"black\", base_color = \"black\", line_bright = 1, line_alpha = 1;\n    var mode = \"text\";\n    var line_mode = \"default\";\n    var mobile_canvas, mobile_ctx, mobile_canvas_ope, mobile_canvas_img, prev_img_w, mobile_img_x, mobile_img_y;\n    var reader = new FileReader();\n    var form = document[\"form\"];\n    var katex_rule = getRuleBySelector('.katex');\n    var text_form = document.getElementById(\"textform\");\n    var group = document.getElementById(\"draw_canvas\");\n    var text_area = document.getElementById(\"text\");\n    var menu = document.getElementById(\"floating_menu\");\n    var range = menu.children[\"move\"];\n    var thickness = document.getElementById(\"thickness\");\n    var thickness_label = document.getElementById(\"thickness_label\");\n    var bright = document.getElementById(\"bright\");\n    var bright_label = document.getElementById(\"bright_label\");\n    var auto_update = menu.children[\"auto_update\"];\n    var font_size = menu.children[\"font_size\"];\n    var colorcircle2 = document.getElementsByName(\"colorcircle\");\n    var line_mode_button = document.getElementById(\"line_mode_button\");\n    var sub_canvas = document.getElementById(\"sub_canvas\");\n    var upload_form = document.getElementById(\"upload_button\");\n    var sub_ctx = sub_canvas.getContext(\"2d\");\n    setup();\n    function setup() {\n        set_button_option();\n        auto_update.onclick = function () { return onClick(); };\n        font_size.addEventListener('change', function () { change_fontsize(), onClick(); });\n        range.addEventListener('input', function () { return change_range(); });\n        thickness.addEventListener('input', function () { return change_thickness(); });\n        bright.addEventListener('input', function () { return change_bright(); });\n        colorcircle2.forEach(function (e) {\n            e.addEventListener('input', function () { return change_color(e.value); });\n        });\n        line_mode_button.onchange = function () {\n            line_mode = line_mode_button.options[line_mode_button.selectedIndex].value;\n        };\n        upload_form.onchange = function () {\n            reader.readAsDataURL(upload_form.files[0]);\n        };\n        reader.onload = function () {\n            create_image_canvas(reader.result);\n        };\n        thickness.value = 3;\n        change_fontsize();\n        change_range();\n        change_thickness();\n        change_color(\"black\");\n        document.getElementById(\"button_menu\").onclick = form.onkeyup = function () {\n            var pos = form.text.selectionStart;\n            var len = form.text.value.length;\n            change_fontsize();\n            if (form.text.value.length != len)\n                pos++;\n            form.text.selectionEnd = form.text.selectionStart = pos;\n            if (auto_update.checked)\n                onClick();\n        };\n        form.text.value = \"a+b+c\";\n        window.onresize = function () { set_cur_canvas(); resize_sub_canvas(); };\n        resize_sub_canvas();\n        set_keyEvent();\n        set_cur_canvas();\n        group.style.pointerEvents = \"none\";\n        onClick();\n    }\n    function set_keyEvent() {\n        document.addEventListener(\"keydown\", function (event) {\n            //console.log(event.key)\n            if (event.key == \"Shift\")\n                line_mode = \"straight\";\n        });\n        document.addEventListener(\"keyup\", function (event) {\n            //console.log(event.key)\n            if (event.key == \"Shift\")\n                line_mode = \"default\";\n        });\n    }\n    function set_button_option() {\n        document.getElementById(\"button_clear\").addEventListener(\"click\", function () { if (window.confirm(\"本当にテキストを全て削除しますか？\")) {\n            form.text.value = \"\";\n            onClick();\n        } });\n        document.getElementById(\"button_cases\").addEventListener(\"click\", function () { return add_str(\"\\n\\\\begin{cases}\\n\", \"\\n\\\\end{cases}\"); });\n        document.getElementById(\"button_align\").addEventListener(\"click\", function () { return add_str(\"\\n\\\\begin{aligned}\\n\", \"\\n\\\\end{aligned}\", true); });\n        document.getElementById(\"button_frac\").addEventListener(\"click\", function () { return add_str(\"\\\\frac{a}{b}\"); });\n        document.getElementById(\"button_dfrac\").addEventListener(\"click\", function () { return add_str(\"\\\\dfrac{a}{b}\"); });\n        document.getElementById(\"button_mathrm\").addEventListener(\"click\", function () { return add_str(\"\\\\mathrm{\", \"}\"); });\n        document.getElementById(\"button_rightarrow\").addEventListener(\"click\", function () { return add_str(\"\\\\rightarrow \"); });\n        document.getElementById(\"syntax_checker\").addEventListener(\"click\", function () { return syntax_check(); });\n        document.getElementById(\"text_mode\").addEventListener(\"click\", function () { return change_text_mode(); });\n        document.getElementById(\"paint_mode\").addEventListener(\"click\", function () { return change_paint_mode(); });\n        document.getElementById(\"paint_upload\").addEventListener(\"click\", function () { return paint_upload(); });\n        document.getElementById(\"paint_undo\").addEventListener(\"click\", function () { return paint_undo(); });\n        document.getElementById(\"paint_do\").addEventListener(\"click\", function () { return paint_do(); });\n        document.getElementById(\"paint_clear\").addEventListener(\"click\", function () { if (window.confirm(\"本当にペイントを全て削除しますか？\"))\n            erase_all_canvas(); });\n    }\n    function add_str(str1, str2, flag) {\n        if (str2 === void 0) { str2 = \"\"; }\n        if (flag === void 0) { flag = false; }\n        var pos = form.text.selectionStart;\n        var pos2 = form.text.selectionEnd;\n        var pre = form.text.value.slice(0, pos);\n        var middle = form.text.value.slice(pos, pos2);\n        var after = form.text.value.slice(pos2);\n        if (flag)\n            middle = middle.replace(/(^|[^&])=/g, '$1&=');\n        pre += str1;\n        middle += str2;\n        form.text.value = pre + middle + after;\n        form.text.focus();\n        form.text.selectionEnd = form.text.selectionStart = pre.length + middle.length;\n        onClick();\n    }\n    function create_image_canvas(url) {\n        var img = new Image();\n        img.src = url;\n        img.onload = function () {\n            if (mobile_canvas)\n                transfer_mobile_canvase_to_cur_canvas();\n            var canvas = document.createElement(\"canvas\");\n            canvas.classList.add(\"canvas\");\n            canvas.width = document.documentElement.scrollWidth - 30;\n            canvas.height = document.documentElement.scrollHeight;\n            canvas.style.zIndex = \"1\";\n            var context = canvas.getContext(\"2d\");\n            group.appendChild(canvas);\n            canvas.addEventListener('pointerdown', mobile_canvas_dragStart);\n            canvas.addEventListener('pointerup', mobile_canvas_dragEnd);\n            canvas.addEventListener('pointerout', mobile_canvas_dragEnd);\n            canvas.addEventListener('pointermove', mobile_canvas_move);\n            context.setLineDash([3, 3]);\n            context.lineCap = 'round'; // 丸みを帯びた線にする\n            context.lineJoin = 'round'; // 丸みを帯びた線にする\n            context.lineWidth = 1; // 線の太さ\n            context.strokeStyle = \"black\"; // 線の色\n            mobile_canvas = canvas;\n            mobile_ctx = context;\n            mobile_canvas_img = img;\n            prev_img_w = 300;\n            var scale = prev_img_w / img.width;\n            disp_mobile_img(img, mobile_img_x = 0, mobile_img_y = 0, img.width * scale, img.height * scale);\n        };\n    }\n    function syntax_check() {\n        var html, ok = true;\n        try {\n            html = katex.renderToString(form.text.value, {});\n        }\n        catch (error) {\n            alert(error.message);\n            ok = false;\n            var list = error.message.split(':');\n            if (list[0] === \"KaTeX parse error\") {\n                var list2 = list[2].split(' ');\n                var len = list2[1].length;\n                var pos = parseInt(list2[4], 10);\n                form.text.focus();\n                form.text.selectionStart = pos - 1;\n                form.text.selectionEnd = pos + len;\n            }\n        }\n        if (ok)\n            alert(\"構文エラーはありませんでした。\");\n    }\n    function onClick() {\n        var text = henkan2(form.text.value);\n        var html, ok = true;\n        try {\n            html = katex.renderToString(text, {}) + \"<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>\";\n        }\n        catch (error) {\n            ok = false;\n        }\n        if (ok) {\n            text_area.innerHTML = html;\n        }\n    }\n    function change_text_mode() {\n        if (mode == \"text\")\n            return;\n        mode = \"text\";\n        menu.style.bottom = \"0px\";\n        change_range();\n        text_form.style.transition = \"1s\";\n        group.style.pointerEvents = \"none\";\n        onClick();\n    }\n    function change_paint_mode() {\n        if (mode == \"paint\")\n            return;\n        mode = \"paint\";\n        menu.style.bottom = \"-50px\";\n        text_form.style.transition = \"1s\";\n        text_form.style.left = \"100%\";\n        group.style.pointerEvents = \"auto\";\n    }\n    function change_fontsize() {\n        katex_rule.style.cssText = \"font-size : \" + font_size.value + \"em\";\n    }\n    function henkan2(str) {\n        str = str.replace(/\\\\$/, '');\n        str = str.replace(/\\*/g, '\\\\times ');\n        str = str.replace(/\\//g, '\\\\div ');\n        str = str.replace(/\\\\begin{cases}\\n/g, '\\\\begin{cases}');\n        str = str.replace(/\\\\begin{aligned}\\n/g, '\\\\begin{aligned}');\n        str = str.replace(/\\.\\n/g, '');\n        str = str.replace(/\\n/g, '\\\\ \\\\\\\\\\n');\n        str = str.replace(/>=/g, '\\\\geqq');\n        str = str.replace(/<=/g, '\\\\leqq');\n        str = str.replace(/\\\\vec2/g, '\\\\overrightarrow');\n        return str;\n    }\n    function getRuleBySelector(sele) {\n        var i, j, sheets, rules, rule = null;\n        // stylesheetのリストを取得\n        sheets = document.styleSheets;\n        for (i = 0; i < sheets.length; i++) {\n            // そのstylesheetが持つCSSルールのリストを取得\n            rules = sheets[i].cssRules;\n            for (j = 0; j < rules.length; j++) {\n                // セレクタが一致するか調べる\n                if (sele === rules[j].selectorText) {\n                    rule = rules[j];\n                    break;\n                }\n            }\n        }\n        return rule;\n    }\n    function change_range() {\n        var v = parseInt(range.value) / 100;\n        var left = 30 * (1 - v) + 80 * v;\n        text_form.style.transition = \"0s\";\n        text_form.style.left = left + \"%\";\n    }\n    function change_thickness() {\n        var thick_table = [1, 2, 3, 5, 7, 9, 10, 20, 30, 50];\n        line_thickness = thick_table[thickness.value - 1];\n        thickness_label.innerHTML = \"線の太さ：\" + line_thickness;\n    }\n    function change_bright() {\n        line_bright = bright.value / 10;\n        bright_label.innerHTML = \"明度：\" + line_bright;\n        update_linecolor();\n    }\n    function change_color(color) {\n        base_color = color;\n        update_linecolor();\n    }\n    function toHex(val) {\n        val = Math.round(val);\n        return (\"0\" + val.toString(16)).slice(-2);\n    }\n    function calc_color(val, k) {\n        if (k <= 1)\n            return Math.round(val * k);\n        else\n            return Math.round(255 * (k - 1) + val * (2 - k));\n    }\n    function update_linecolor() {\n        if (base_color == \"erase\") {\n            line_color = \"erase\";\n            return;\n        }\n        var c = Object(_rgbcolor__WEBPACK_IMPORTED_MODULE_0__[\"RGBColor\"])(base_color);\n        c[0] = calc_color(c[0], line_bright);\n        c[1] = calc_color(c[1], line_bright);\n        c[2] = calc_color(c[2], line_bright);\n        line_color = \"#\" + toHex(c[0]) + toHex(c[1]) + toHex(c[2]) + toHex(255);\n    }\n    function erase_all_canvas() {\n        set_canvases([]);\n        canvas_history.push(canvas_list.concat());\n        history_id++;\n    }\n    function erase_canvas(i) {\n        group.removeChild(canvas_list[i]);\n        canvas_list.splice(i, 1);\n        canvas_history.push(canvas_list.concat());\n        history_id++;\n    }\n    function set_canvases(new_a) {\n        var rm = canvas_list.filter(function (i) { return new_a.indexOf(i) == -1; });\n        var ad = new_a.filter(function (i) { return canvas_list.indexOf(i) == -1; });\n        rm.forEach(function (e) { return group.removeChild(e); });\n        ad.forEach(function (e) { return group.appendChild(e); });\n        canvas_list = new_a.concat();\n    }\n    function paint_upload() {\n        upload_form.click();\n    }\n    function paint_undo() {\n        if (history_id <= 0)\n            return;\n        set_canvases(canvas_history[history_id - 1]);\n        history_id--;\n    }\n    function paint_do() {\n        if (history_id >= canvas_history.length - 1)\n            return;\n        set_canvases(canvas_history[history_id + 1]);\n        history_id++;\n    }\n    function resize_sub_canvas() {\n        sub_canvas.width = document.documentElement.scrollWidth - 30;\n        sub_canvas.height = document.documentElement.scrollHeight;\n        sub_canvas.style.zIndex = 10;\n        sub_canvas.style[\"pointer-events\"] = \"none\";\n        sub_ctx = sub_canvas.getContext(\"2d\");\n        sub_ctx.setLineDash([3, 3]);\n        sub_ctx.lineCap = 'round'; // 丸みを帯びた線にする\n        sub_ctx.lineJoin = 'round'; // 丸みを帯びた線にする\n        sub_ctx.lineWidth = 1; // 線の太さ\n        sub_ctx.strokeStyle = \"black\"; // 線の色\n    }\n    function set_cur_canvas() {\n        cur_canvas = document.createElement(\"canvas\");\n        cur_canvas.classList.add(\"canvas\");\n        cur_canvas.width = document.documentElement.scrollWidth - 30;\n        cur_canvas.height = document.documentElement.scrollHeight;\n        cur_canvas.style.zIndex = 1;\n        cur_context = cur_canvas.getContext(\"2d\");\n        group.appendChild(cur_canvas);\n        cur_canvas.addEventListener('pointerdown', dragStart);\n        cur_canvas.addEventListener('pointerup', dragEnd);\n        cur_canvas.addEventListener('pointerout', dragEnd);\n        cur_canvas.addEventListener('pointermove', function (event) {\n            draw(event.layerX, event.layerY);\n        });\n    }\n    function create_new_canvas() {\n        if (!canvas_written)\n            return;\n        canvas_list.push(cur_canvas);\n        history_id++;\n        canvas_written = false;\n        canvas_history.length = history_id + 1;\n        canvas_history[history_id] = canvas_list.concat();\n        set_cur_canvas();\n    }\n    // 直前のマウスのcanvas上のx座標とy座標を記録する\n    var lastPosition = { x: null, y: null };\n    // マウスがドラッグされているか(クリックされたままか)判断するためのフラグ\n    var isDrag = false;\n    function erase(x, y) {\n        if (!isDrag) {\n            return;\n        }\n        var k = 2;\n        var dx = [0, k, 0, -k, 0], dy = [0, 0, k, 0, -k];\n        for (var i = 0; i < canvas_list.length; i++) {\n            var context = canvas_list[i].getContext(\"2d\");\n            for (var j = 0; j < 5; j++) {\n                var color = context.getImageData(x + dx[j], y + dy[j], 1, 1).data;\n                if (color[0] != 0 || color[1] != 0 || color[2] != 0 || color[3] != 0) {\n                    erase_canvas([i]);\n                    break;\n                }\n            }\n        }\n    }\n    function round(v) {\n        return Math.floor((v + 10) / 20) * 20;\n    }\n    // 絵を書く\n    function draw(px, py) {\n        var prev_x, prev_y, next_x, next_y;\n        if (!isDrag) {\n            return;\n        }\n        if (line_color == \"erase\") {\n            erase(px, py);\n            return;\n        }\n        if (line_mode == \"fill\") {\n            if (lastPosition.x === null || lastPosition.y === null)\n                my_fill(px, py);\n            lastPosition.x = px;\n            lastPosition.y = py;\n            return;\n        }\n        if (lastPosition.x === null || lastPosition.y === null) {\n            // ドラッグ開始時の線の開始位置\n            lastPosition.x = px;\n            lastPosition.y = py;\n            cur_context.lineCap = 'round'; // 丸みを帯びた線にする\n            cur_context.lineJoin = 'round'; // 丸みを帯びた線にする\n            cur_context.lineWidth = line_thickness; // 線の太さ\n            cur_context.strokeStyle = line_color; // 線の色\n            cur_context.fillStyle = line_color; // 線の色\n            if (line_mode == \"default\") {\n                cur_context.beginPath();\n            }\n            if (line_mode == \"alpha_rectangle\") {\n                cur_context.fillStyle = cur_context.fillStyle.substring(0, 7) + \"50\";\n            }\n        }\n        switch (line_mode) {\n            case \"default\":\n                cur_context.moveTo(lastPosition.x, lastPosition.y);\n                cur_context.lineTo(px, py);\n                cur_context.stroke();\n                canvas_written = true;\n                lastPosition.x = px;\n                lastPosition.y = py;\n                break;\n            case \"straight\":\n                prev_x = round(lastPosition.x), prev_y = round(lastPosition.y);\n                next_x = round(px), next_y = round(py);\n                cur_context.clearRect(0, 0, cur_canvas.width, cur_canvas.height);\n                if (prev_x == next_x && prev_y == next_y) {\n                    canvas_written = false;\n                    return;\n                }\n                else\n                    canvas_written = true;\n                cur_context.beginPath();\n                cur_context.moveTo(prev_x, prev_y);\n                cur_context.lineTo(next_x, next_y);\n                cur_context.stroke();\n                cur_context.closePath();\n                sub_ctx.clearRect(0, 0, sub_canvas.width, sub_canvas.height);\n                if (prev_x == next_x || prev_y == next_y || Math.abs(prev_x - next_x) == Math.abs(prev_y - next_y)) {\n                    var k_1 = Math.max(sub_canvas.width, sub_canvas.height);\n                    sub_ctx.beginPath();\n                    sub_ctx.moveTo(next_x, next_y);\n                    sub_ctx.lineTo((next_x - prev_x) * k_1 + prev_x, (next_y - prev_y) * k_1 + prev_y);\n                    sub_ctx.stroke();\n                    sub_ctx.closePath();\n                }\n                break;\n            case \"rectangle\":\n            case \"fill_rectangle\":\n            case \"alpha_rectangle\":\n                prev_x = round(lastPosition.x), prev_y = round(lastPosition.y);\n                next_x = round(px), next_y = round(py);\n                cur_context.clearRect(0, 0, cur_canvas.width, cur_canvas.height);\n                if (prev_x == next_x || prev_y == next_y) {\n                    canvas_written = false;\n                    return;\n                }\n                else\n                    canvas_written = true;\n                cur_context.beginPath();\n                cur_context.moveTo(prev_x, prev_y);\n                cur_context.lineTo(prev_x, next_y);\n                cur_context.lineTo(next_x, next_y);\n                cur_context.lineTo(next_x, prev_y);\n                cur_context.lineTo(prev_x, prev_y);\n                if (line_mode == \"rectangle\")\n                    cur_context.stroke();\n                else\n                    cur_context.fillRect(prev_x, prev_y, next_x - prev_x, next_y - prev_y);\n                cur_context.closePath();\n                break;\n            case \"circle\":\n            case \"fill_circle\":\n                prev_x = round(lastPosition.x), prev_y = round(lastPosition.y);\n                next_x = px, next_y = py;\n                cur_context.clearRect(0, 0, cur_canvas.width, cur_canvas.height);\n                if (prev_x == next_x && prev_y == next_y) {\n                    canvas_written = false;\n                    return;\n                }\n                else\n                    canvas_written = true;\n                var radius = round(Math.sqrt((prev_x - next_x) * (prev_x - next_x) + (prev_y - next_y) * (prev_y - next_y)));\n                cur_context.beginPath();\n                cur_context.arc(prev_x, prev_y, radius, 0, 2 * Math.PI, false);\n                if (line_mode == \"fill_circle\")\n                    cur_context.fill();\n                else\n                    cur_context.stroke();\n                cur_context.closePath();\n                break;\n            case \"arrow\":\n                prev_x = round(lastPosition.x), prev_y = round(lastPosition.y);\n                next_x = round(px), next_y = round(py);\n                cur_context.clearRect(0, 0, cur_canvas.width, cur_canvas.height);\n                if (prev_x == next_x && prev_y == next_y) {\n                    canvas_written = false;\n                    return;\n                }\n                else\n                    canvas_written = true;\n                cur_context.beginPath();\n                var w = next_x - prev_x, h = next_y - prev_y, aw = 0, ah = 0;\n                var k = [3, 8, 13, 25, 50, 80];\n                if (Math.abs(prev_x - next_x) >= Math.abs(prev_y - next_y)) {\n                    h = k[Math.min(Math.floor(Math.abs(h) / 10), k.length - 1)];\n                    aw = h + 10;\n                    ah = (Math.abs(aw) + 10) * (w / Math.abs(w));\n                    cur_context.moveTo(prev_x + w, prev_y);\n                    cur_context.lineTo(prev_x + w - ah / 2, prev_y - aw / 2);\n                    cur_context.lineTo(prev_x + w - ah / 2, prev_y - h / 3);\n                    cur_context.lineTo(prev_x, prev_y - h / 3);\n                    cur_context.lineTo(prev_x, prev_y + h / 3);\n                    cur_context.lineTo(prev_x + w - ah / 2, prev_y + h / 3);\n                    cur_context.lineTo(prev_x + w - ah / 2, prev_y + aw / 2);\n                    cur_context.lineTo(prev_x + w, prev_y);\n                }\n                else {\n                    w = k[Math.min(Math.floor(Math.abs(w) / 10), k.length - 1)];\n                    aw = w + 10;\n                    ah = (Math.abs(aw) + 10) * (h / Math.abs(h));\n                    cur_context.moveTo(prev_x, prev_y + h);\n                    cur_context.lineTo(prev_x - aw / 2, prev_y + h - ah / 2);\n                    cur_context.lineTo(prev_x - w / 3, prev_y + h - ah / 2);\n                    cur_context.lineTo(prev_x - w / 3, prev_y);\n                    cur_context.lineTo(prev_x + w / 3, prev_y);\n                    cur_context.lineTo(prev_x + w / 3, prev_y + h - ah / 2);\n                    cur_context.lineTo(prev_x + aw / 2, prev_y + h - ah / 2);\n                    cur_context.lineTo(prev_x, prev_y + h);\n                }\n                cur_context.fill();\n                cur_context.closePath();\n                break;\n        }\n    }\n    // マウスのドラッグを開始したらisDragのフラグをtrueにしてdraw関数内で\n    // お絵かき処理が途中で止まらないようにする\n    function dragStart(event) {\n        isDrag = true;\n        draw(event.layerX, event.layerY);\n    }\n    // マウスのドラッグが終了したら、もしくはマウスがcanvas外に移動したら\n    // isDragのフラグをfalseにしてdraw関数内でお絵かき処理が中断されるようにする\n    function dragEnd(event) {\n        if (!cur_context)\n            return;\n        if (line_mode == \"default\")\n            cur_context.closePath();\n        sub_ctx.clearRect(0, 0, sub_canvas.width, sub_canvas.height);\n        lastPosition.x = null;\n        lastPosition.y = null;\n        if (isDrag && line_color != \"erase\")\n            create_new_canvas();\n        isDrag = false;\n    }\n    function flood_fill(img, dist, px, py, rep_color) {\n        var W = img.width;\n        var H = img.height;\n        var tr = img.data[(W * py + px) * 4];\n        var tg = img.data[(W * py + px) * 4 + 1];\n        var tb = img.data[(W * py + px) * 4 + 2];\n        var ta = img.data[(W * py + px) * 4 + 3];\n        var dx = [1, 0, -1, 0], dy = [0, 1, 0, -1];\n        var pixel = img.data;\n        if (tr == rep_color[0] && tg == rep_color[1] && tb == rep_color[2] && ta == rep_color[3]) {\n            canvas_written = false;\n            return;\n        }\n        canvas_written = true;\n        var cell = [W * py + px];\n        while (cell.length) {\n            var p = cell.pop();\n            pixel[p * 4] = rep_color[0];\n            pixel[p * 4 + 1] = rep_color[1];\n            pixel[p * 4 + 2] = rep_color[2];\n            pixel[p * 4 + 3] = rep_color[3];\n            dist.data[p * 4] = rep_color[0];\n            dist.data[p * 4 + 1] = rep_color[1];\n            dist.data[p * 4 + 2] = rep_color[2];\n            dist.data[p * 4 + 3] = rep_color[3];\n            for (var i = 0; i < 4; i++) {\n                var ty = Math.floor(p / W) + dy[i], tx = p % W + dx[i];\n                if (ty < 0 || ty >= H || tx < 0 || tx >= W)\n                    continue;\n                var nxp = W * ty + tx;\n                if (pixel[nxp * 4] != tr || pixel[nxp * 4 + 1] != tg\n                    || pixel[nxp * 4 + 2] != tb || pixel[nxp * 4 + 3] != ta)\n                    continue;\n                cell.push(nxp);\n            }\n        }\n    }\n    function get_colorValue() {\n        return [line_color.slice(1, 3), line_color.slice(3, 5), line_color.slice(5, 7), line_color.slice(7, 9)].map(function (str) {\n            return parseInt(str, 16);\n        });\n    }\n    function my_fill(px, py) {\n        px = Math.round(px), py = Math.round(py);\n        var img = get_current_img();\n        var dist = cur_context.getImageData(0, 0, cur_canvas.width, cur_canvas.height);\n        flood_fill(img, dist, px, py, get_colorValue());\n        cur_context.putImageData(dist, 0, 0);\n    }\n    function get_current_img() {\n        var new_canvas = document.createElement(\"canvas\");\n        new_canvas.width = cur_canvas.width;\n        new_canvas.height = cur_canvas.height;\n        var ctx = new_canvas.getContext(\"2d\");\n        canvas_history[history_id].forEach(function (c) {\n            ctx.drawImage(c, 0, 0, c.width, c.height);\n        });\n        return ctx.getImageData(0, 0, cur_canvas.width, cur_canvas.height);\n    }\n    function mobile_canvas_dragStart(event) {\n        isDrag = true;\n        var img = mobile_canvas_img;\n        var k = 15;\n        if (mobile_img_x + k < event.layerX && event.layerX < prev_img_w + mobile_img_x - k\n            && mobile_img_y + k < event.layerY && event.layerY < img.height * prev_img_w / img.width + mobile_img_y - k) {\n            mobile_canvas_ope = \"move\";\n        }\n        else if (prev_img_w + mobile_img_x - k < event.layerX && event.layerX < prev_img_w + mobile_img_x + k\n            && mobile_img_y - k < event.layerY && event.layerY < img.height * prev_img_w / img.width + mobile_img_y + k) {\n            mobile_canvas_ope = \"ch_scale_right\";\n        }\n        else if (mobile_img_x - k < event.layerX && event.layerX < mobile_img_x + k\n            && mobile_img_y - k < event.layerY && event.layerY < img.height * prev_img_w / img.width + mobile_img_y + k) {\n            mobile_canvas_ope = \"ch_scale_left\";\n        }\n        else if (mobile_img_x < event.layerX && event.layerX < prev_img_w + mobile_img_x\n            && mobile_img_y - k < event.layerY && event.layerY < mobile_img_y + k) {\n            mobile_canvas_ope = \"ch_scale_top\";\n        }\n        else if (mobile_img_x < event.layerX && event.layerX < prev_img_w + mobile_img_x\n            && img.height * prev_img_w / img.width + mobile_img_y - k < event.layerY\n            && event.layerY < img.height * prev_img_w / img.width + mobile_img_y + k) {\n            mobile_canvas_ope = \"ch_scale_bottom\";\n        }\n        else {\n            mobile_canvas_ope = \"set\";\n            transfer_mobile_canvase_to_cur_canvas();\n        }\n        lastPosition.x = event.layerX;\n        lastPosition.y = event.layerY;\n    }\n    function mobile_canvas_dragEnd(event) {\n        if (!isDrag)\n            return;\n        isDrag = false;\n        var dx = event.layerX - lastPosition.x;\n        var dy = event.layerY - lastPosition.y;\n        var img = mobile_canvas_img;\n        switch (mobile_canvas_ope) {\n            case \"ch_scale_left\":\n                prev_img_w -= dx;\n                mobile_img_x += dx;\n                break;\n            case \"ch_scale_right\":\n                prev_img_w += dx;\n                break;\n            case \"ch_scale_top\":\n                prev_img_w -= dy * img.width / img.height;\n                mobile_img_y += dy;\n                break;\n            case \"ch_scale_bottom\":\n                prev_img_w += dy * img.width / img.height;\n                break;\n            case \"move\":\n                mobile_img_x += dx;\n                mobile_img_y += dy;\n                break;\n            case \"set\":\n                break;\n        }\n        lastPosition.x = null;\n        lastPosition.y = null;\n    }\n    function mobile_canvas_move(event) {\n        if (isDrag == false) {\n            var img = mobile_canvas_img;\n            var k = 15;\n            if (mobile_img_x + k < event.layerX && event.layerX < prev_img_w + mobile_img_x - k\n                && mobile_img_y + k < event.layerY && event.layerY < img.height * prev_img_w / img.width + mobile_img_y - k) {\n                mobile_canvas.style.cursor = \"move\";\n            }\n            else if (prev_img_w + mobile_img_x - k < event.layerX && event.layerX < prev_img_w + mobile_img_x + k\n                && mobile_img_y - k < event.layerY && event.layerY < img.height * prev_img_w / img.width + mobile_img_y + k) {\n                mobile_canvas.style.cursor = \"ew-resize\";\n            }\n            else if (mobile_img_x - k < event.layerX && event.layerX < mobile_img_x + k\n                && mobile_img_y - k < event.layerY && event.layerY < img.height * prev_img_w / img.width + mobile_img_y + k) {\n                mobile_canvas.style.cursor = \"ew-resize\";\n            }\n            else if (mobile_img_x < event.layerX && event.layerX < prev_img_w + mobile_img_x\n                && mobile_img_y - k < event.layerY && event.layerY < mobile_img_y + k) {\n                mobile_canvas.style.cursor = \"ns-resize\";\n            }\n            else if (mobile_img_x < event.layerX && event.layerX < prev_img_w + mobile_img_x\n                && img.height * prev_img_w / img.width + mobile_img_y - k < event.layerY\n                && event.layerY < img.height * prev_img_w / img.width + mobile_img_y + k) {\n                mobile_canvas.style.cursor = \"ns-resize\";\n            }\n            else {\n                mobile_canvas_ope = \"set\";\n                mobile_canvas.style.cursor = \"default\";\n            }\n        }\n        else {\n            var img = mobile_canvas_img;\n            var dx = event.layerX - lastPosition.x;\n            var dy = event.layerY - lastPosition.y;\n            var scale = void 0;\n            switch (mobile_canvas_ope) {\n                case \"ch_scale_left\":\n                    scale = (prev_img_w - dx) / img.width;\n                    disp_mobile_img(img, mobile_img_x + dx, mobile_img_y, img.width * scale, img.height * scale);\n                    break;\n                case \"ch_scale_right\":\n                    scale = (prev_img_w + dx) / img.width;\n                    disp_mobile_img(img, mobile_img_x, mobile_img_y, img.width * scale, img.height * scale);\n                    break;\n                case \"ch_scale_top\":\n                    scale = (prev_img_w * img.height / img.width - dy) / img.height;\n                    disp_mobile_img(img, mobile_img_x, mobile_img_y + dy, img.width * scale, img.height * scale);\n                    break;\n                case \"ch_scale_bottom\":\n                    scale = (prev_img_w * img.height / img.width + dy) / img.height;\n                    disp_mobile_img(img, mobile_img_x, mobile_img_y, img.width * scale, img.height * scale);\n                    break;\n                case \"move\":\n                    disp_mobile_img(img, mobile_img_x + dx, mobile_img_y + dy, prev_img_w, img.height * prev_img_w / img.width);\n                    break;\n            }\n        }\n    }\n    function transfer_mobile_canvase_to_cur_canvas() {\n        var img = mobile_canvas_img;\n        cur_context.drawImage(img, mobile_img_x, mobile_img_y, prev_img_w, img.height * prev_img_w / img.width);\n        group.removeChild(mobile_canvas);\n        mobile_canvas = null;\n        mobile_ctx = null;\n        mobile_canvas_img = null;\n        canvas_written = true;\n        create_new_canvas();\n    }\n    function disp_mobile_img(img, x, y, sw, sh) {\n        mobile_ctx.clearRect(0, 0, mobile_canvas.width, mobile_canvas.height);\n        mobile_ctx.drawImage(img, x, y, sw, sh);\n        mobile_ctx.beginPath();\n        mobile_ctx.moveTo(x, y);\n        mobile_ctx.lineTo(x + sw, y);\n        mobile_ctx.lineTo(x + sw, y + sh);\n        mobile_ctx.lineTo(x, y + sh);\n        mobile_ctx.lineTo(x, y);\n        mobile_ctx.stroke();\n        mobile_ctx.closePath();\n    }\n});\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ }),

/***/ "./src/rgbcolor.ts":
/*!*************************!*\
  !*** ./src/rgbcolor.ts ***!
  \*************************/
/*! exports provided: RGBColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBColor\", function() { return RGBColor; });\n/**\n * A class to parse color values\n * @author Stoyan Stefanov <sstoo@gmail.com>\n * @link   http://www.phpied.com/rgb-color-parser-in-javascript/\n * @license MIT license\n */\nfunction RGBColor(color_string) {\n    var ok = false, r, g, b;\n    // strip any leading #\n    if (color_string.charAt(0) == '#') { // remove # if any\n        color_string = color_string.substr(1, 6);\n    }\n    color_string = color_string.replace(/ /g, '');\n    color_string = color_string.toLowerCase();\n    // before getting into regexps, try simple matches\n    // and overwrite the input\n    var simple_colors = {\n        aliceblue: 'f0f8ff',\n        antiquewhite: 'faebd7',\n        aqua: '00ffff',\n        aquamarine: '7fffd4',\n        azure: 'f0ffff',\n        beige: 'f5f5dc',\n        bisque: 'ffe4c4',\n        black: '000000',\n        blanchedalmond: 'ffebcd',\n        blue: '0000ff',\n        blueviolet: '8a2be2',\n        brown: 'a52a2a',\n        burlywood: 'deb887',\n        cadetblue: '5f9ea0',\n        chartreuse: '7fff00',\n        chocolate: 'd2691e',\n        coral: 'ff7f50',\n        cornflowerblue: '6495ed',\n        cornsilk: 'fff8dc',\n        crimson: 'dc143c',\n        cyan: '00ffff',\n        darkblue: '00008b',\n        darkcyan: '008b8b',\n        darkgoldenrod: 'b8860b',\n        darkgray: 'a9a9a9',\n        darkgreen: '006400',\n        darkkhaki: 'bdb76b',\n        darkmagenta: '8b008b',\n        darkolivegreen: '556b2f',\n        darkorange: 'ff8c00',\n        darkorchid: '9932cc',\n        darkred: '8b0000',\n        darksalmon: 'e9967a',\n        darkseagreen: '8fbc8f',\n        darkslateblue: '483d8b',\n        darkslategray: '2f4f4f',\n        darkturquoise: '00ced1',\n        darkviolet: '9400d3',\n        deeppink: 'ff1493',\n        deepskyblue: '00bfff',\n        dimgray: '696969',\n        dodgerblue: '1e90ff',\n        feldspar: 'd19275',\n        firebrick: 'b22222',\n        floralwhite: 'fffaf0',\n        forestgreen: '228b22',\n        fuchsia: 'ff00ff',\n        gainsboro: 'dcdcdc',\n        ghostwhite: 'f8f8ff',\n        gold: 'ffd700',\n        goldenrod: 'daa520',\n        gray: '808080',\n        green: '008000',\n        greenyellow: 'adff2f',\n        honeydew: 'f0fff0',\n        hotpink: 'ff69b4',\n        indianred: 'cd5c5c',\n        indigo: '4b0082',\n        ivory: 'fffff0',\n        khaki: 'f0e68c',\n        lavender: 'e6e6fa',\n        lavenderblush: 'fff0f5',\n        lawngreen: '7cfc00',\n        lemonchiffon: 'fffacd',\n        lightblue: 'add8e6',\n        lightcoral: 'f08080',\n        lightcyan: 'e0ffff',\n        lightgoldenrodyellow: 'fafad2',\n        lightgrey: 'd3d3d3',\n        lightgreen: '90ee90',\n        lightpink: 'ffb6c1',\n        lightsalmon: 'ffa07a',\n        lightseagreen: '20b2aa',\n        lightskyblue: '87cefa',\n        lightslateblue: '8470ff',\n        lightslategray: '778899',\n        lightsteelblue: 'b0c4de',\n        lightyellow: 'ffffe0',\n        lime: '00ff00',\n        limegreen: '32cd32',\n        linen: 'faf0e6',\n        magenta: 'ff00ff',\n        maroon: '800000',\n        mediumaquamarine: '66cdaa',\n        mediumblue: '0000cd',\n        mediumorchid: 'ba55d3',\n        mediumpurple: '9370d8',\n        mediumseagreen: '3cb371',\n        mediumslateblue: '7b68ee',\n        mediumspringgreen: '00fa9a',\n        mediumturquoise: '48d1cc',\n        mediumvioletred: 'c71585',\n        midnightblue: '191970',\n        mintcream: 'f5fffa',\n        mistyrose: 'ffe4e1',\n        moccasin: 'ffe4b5',\n        navajowhite: 'ffdead',\n        navy: '000080',\n        oldlace: 'fdf5e6',\n        olive: '808000',\n        olivedrab: '6b8e23',\n        orange: 'ffa500',\n        orangered: 'ff4500',\n        orchid: 'da70d6',\n        palegoldenrod: 'eee8aa',\n        palegreen: '98fb98',\n        paleturquoise: 'afeeee',\n        palevioletred: 'd87093',\n        papayawhip: 'ffefd5',\n        peachpuff: 'ffdab9',\n        peru: 'cd853f',\n        pink: 'ffc0cb',\n        plum: 'dda0dd',\n        powderblue: 'b0e0e6',\n        purple: '800080',\n        red: 'ff0000',\n        rosybrown: 'bc8f8f',\n        royalblue: '4169e1',\n        saddlebrown: '8b4513',\n        salmon: 'fa8072',\n        sandybrown: 'f4a460',\n        seagreen: '2e8b57',\n        seashell: 'fff5ee',\n        sienna: 'a0522d',\n        silver: 'c0c0c0',\n        skyblue: '87ceeb',\n        slateblue: '6a5acd',\n        slategray: '708090',\n        snow: 'fffafa',\n        springgreen: '00ff7f',\n        steelblue: '4682b4',\n        tan: 'd2b48c',\n        teal: '008080',\n        thistle: 'd8bfd8',\n        tomato: 'ff6347',\n        turquoise: '40e0d0',\n        violet: 'ee82ee',\n        violetred: 'd02090',\n        wheat: 'f5deb3',\n        white: 'ffffff',\n        whitesmoke: 'f5f5f5',\n        yellow: 'ffff00',\n        yellowgreen: '9acd32'\n    };\n    for (var key in simple_colors) {\n        if (color_string == key) {\n            color_string = simple_colors[key];\n        }\n    }\n    // emd of simple type-in colors\n    // array of color definition objects\n    var color_defs = [\n        {\n            re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\n            process: function (bits) {\n                return [\n                    parseInt(bits[1]),\n                    parseInt(bits[2]),\n                    parseInt(bits[3])\n                ];\n            }\n        },\n        {\n            re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n            example: ['#00ff00', '336699'],\n            process: function (bits) {\n                return [\n                    parseInt(bits[1], 16),\n                    parseInt(bits[2], 16),\n                    parseInt(bits[3], 16)\n                ];\n            }\n        },\n        {\n            re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n            example: ['#fb0', 'f0f'],\n            process: function (bits) {\n                return [\n                    parseInt(bits[1] + bits[1], 16),\n                    parseInt(bits[2] + bits[2], 16),\n                    parseInt(bits[3] + bits[3], 16)\n                ];\n            }\n        }\n    ];\n    // search through the definitions to find a match\n    for (var i = 0; i < color_defs.length; i++) {\n        var re = color_defs[i].re;\n        var processor = color_defs[i].process;\n        var bits = re.exec(color_string);\n        if (bits) {\n            var channels = processor(bits);\n            r = channels[0];\n            g = channels[1];\n            b = channels[2];\n            ok = true;\n        }\n    }\n    // validate/cleanup values\n    r = (r < 0 || isNaN(r)) ? 0 : ((r > 255) ? 255 : r);\n    g = (g < 0 || isNaN(g)) ? 0 : ((g > 255) ? 255 : g);\n    b = (b < 0 || isNaN(b)) ? 0 : ((b > 255) ? 255 : b);\n    return [r, g, b, 255];\n}\n\n\n//# sourceURL=webpack:///./src/rgbcolor.ts?");

/***/ }),

/***/ 0:
/*!****************************************!*\
  !*** multi ./src/main.ts ./src/use.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./src/main.ts */\"./src/main.ts\");\n!(function webpackMissingModule() { var e = new Error(\"Cannot find module './src/use.ts'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\n\n//# sourceURL=webpack:///multi_./src/main.ts_./src/use.ts?");

/***/ })

/******/ });